// Generated by CoffeeScript 1.3.3
(function() {
  var $, iteration, ls, mainLoop, updateBus, updateCantinas, updateNews, updateOffice;

  $ = jQuery;

  ls = localStorage;

  iteration = 0;

  mainLoop = function() {
    if (DEBUG) {
      console.log("\n#" + iteration);
    }
    if (iteration % UPDATE_OFFICE_INTERVAL === 0) {
      updateOffice();
    }
    if (iteration % UPDATE_NEWS_INTERVAL === 0) {
      updateNews();
    }
    if (iteration % UPDATE_BUS_INTERVAL === 0) {
      updateBus();
    }
    if (iteration % UPDATE_CANTINAS_INTERVAL === 0) {
      updateCantinas();
    }
    if (10000 < iteration) {
      iteration = 0;
    } else {
      iteration++;
    }
    return setTimeout((function() {
      return mainLoop();
    }), PAGE_LOOP);
  };

  updateOffice = function() {
    if (DEBUG) {
      console.log('updateOffice');
    }
    return Office.get(function(status, title) {
      if (ls.currentStatus !== status || ls.currentStatusTitle !== title) {
        $('#office img').attr('src', 'img/status-' + status + '.png');
        $('#office #subtext').html(title);
        ls.currentStatus = status;
        return ls.currentStatusTitle = title;
      }
    });
  };

  updateNews = function() {
    var displayStories;
    if (DEBUG) {
      console.log('updateNews');
    }
    fetchFeed(function() {
      var response;
      response = ls.lastResponseData;
      if (response !== null) {
        return displayStories(response);
      } else {
        return console.log('ERROR: response was null');
      }
    });
    return displayStories = function(xmlstring) {
      var $xml, idsOfLastViewed, index, items, value, xmldoc, _guid, _mostRecent, _results, _text;
      xmldoc = $.parseXML(xmlstring);
      $xml = $(xmldoc);
      items = $xml.find("item");
      _guid = $(items[0]).find("guid");
      _text = $(_guid).text();
      _mostRecent = _text.split('/')[4];
      if (ls.mostRecentRead === _mostRecent) {
        return;
      }
      ls.mostRecentRead = _mostRecent;
      $('#news').html('');
      idsOfLastViewed = [];
      items.each(function(index, element) {
        var item, limit, post;
        limit = ls.noDinnerInfo === 'true' ? 4 : 3;
        if (index < limit) {
          post = parsePost(element);
          idsOfLastViewed.push(post.id);
          item = '<div class="post"><span class="read"></span>';
          item += '\
            <span class="title">' + post.title + '</span>\
            <div class="item">\
              <img id="' + post.id + '" src="' + post.image + '" width="107" />\
              <div class="textwrapper">\
                <div class="emphasized">- Av ' + post.creator + ', skrevet ' + post.date + '</div>\
                ' + post.description + '\
              </div>\
            </div>\
          </div>';
          return $('#news').append(item);
        }
      });
      _results = [];
      for (index in idsOfLastViewed) {
        value = idsOfLastViewed[index];
        _results.push(getImageUrlForId(value, function(id, image) {
          return $('#' + id).attr('src', image);
        }));
      }
      return _results;
    };
  };

  updateBus = function() {
    var insertBusInfo, requestedLines, url_fra_byen, url_mot_byen;
    if (DEBUG) {
      console.log('updateBus');
    }
    url_mot_byen = 'http://api.visuweb.no/bybussen/1.0/Departure/Realtime/16011333/f6975f3c1a3d838dc69724b9445b3466';
    url_fra_byen = 'http://api.visuweb.no/bybussen/1.0/Departure/Realtime/16010333/f6975f3c1a3d838dc69724b9445b3466';
    requestedLines = {
      '5': 2,
      '22': 2
    };
    Bus.get(url_mot_byen, requestedLines, function(lines) {
      return insertBusInfo(lines, '#left');
    });
    Bus.get(url_fra_byen, requestedLines, function(lines) {
      return insertBusInfo(lines, '#right');
    });
    return insertBusInfo = function(lines, cssIdentificator) {
      var arrow, counter, i, j, spans, times, _results;
      spans = ['.first', '.second'];
      counter = 0;
      _results = [];
      for (i in lines) {
        arrow = cssIdentificator === '#left' ? '&larr;' : '&rarr;';
        $('#bus ' + cssIdentificator + ' ' + spans[counter] + ' .arrow').html(arrow);
        if (lines[i]['destination'] === void 0) {
          $('#bus ' + cssIdentificator + ' ' + spans[counter] + ' .line').html(i + ' ...zzZZzz...');
        } else {
          $('#bus ' + cssIdentificator + ' ' + spans[counter] + ' .line').html(i + ' ' + lines[i]['destination']);
          times = '';
          for (j in lines[i]['departures']) {
            if (j !== '0') {
              times += ', ';
            }
            times += lines[i]['departures'][j];
          }
          $('#bus ' + cssIdentificator + ' ' + spans[counter] + ' .time').html(times);
        }
        _results.push(counter++);
      }
      return _results;
    };
  };

  updateCantinas = function() {
    var hangaren_rss, listDinners, realfag_rss;
    if (DEBUG) {
      console.log('updateCantinas');
    }
    hangaren_rss = 'http://sit.no/rss.ap?thisId=36444&ma=on&ti=on&on=on&to=on&fr=on';
    realfag_rss = 'http://sit.no/rss.ap?thisId=36447&ma=on&ti=on&on=on&to=on&fr=on';
    Cantina.get(hangaren_rss, function(menu) {
      return $('#cantinas #hangaren #dinnerbox').html(listDinners(menu));
    });
    Cantina.get(realfag_rss, function(menu) {
      return $('#cantinas #realfag #dinnerbox').html(listDinners(menu));
    });
    return listDinners = function(menu) {
      var dinner, dinnerlist, price, _i, _len;
      dinnerlist = '';
      if (typeof menu === 'string') {
        ls.noDinnerInfo = 'true';
        dinnerlist += '<li class="dinnerlist">' + menu + '</li>';
      } else {
        ls.noDinnerInfo = 'false';
        for (_i = 0, _len = menu.length; _i < _len; _i++) {
          dinner = menu[_i];
          if (dinner.price !== null) {
            price = dinner.price + ',- ';
          } else {
            price = '';
          }
          dinnerlist += '<li class="dinnerlist">' + price + dinner.text + '</li>';
        }
      }
      return dinnerlist;
    };
  };

  $(function() {
    if (DEBUG) {
      less.watch();
    }
    ls.removeItem('mostRecentRead');
    ls.removeItem('currentStatus');
    ls.removeItem('currentStatusTitle');
    if (OPERATING_SYSTEM === 'Windows') {
      $('#pagefliptext').attr("style", "bottom:9px;");
      $('#pagefliplink').attr("style", "bottom:9px;");
    }
    setInterval((function() {
      return $(".pageflipcursor").animate({
        opacity: 0
      }, "fast", "swing", function() {
        return $(this).animate({
          opacity: 1
        }, "fast", "swing");
      });
    }), 600);
    setInterval((function() {
      var linebreaks, num, random;
      random = Math.ceil(Math.random() * 25);
      linebreaks = ((function() {
        var _i, _results;
        _results = [];
        for (num = _i = 0; 0 <= random ? _i <= random : _i >= random; num = 0 <= random ? ++_i : --_i) {
          _results.push('<br />');
        }
        return _results;
      })()).join(' ');
      $('#overlay').html(linebreaks + 'preventing image burn-in...');
      $('#overlay').css('opacity', 1);
      return setTimeout((function() {
        return $('#overlay').css('opacity', 0);
      }), 3500);
    }), 1800000);
    setInterval((function() {
      return document.location.reload();
    }), 86400000);
    return mainLoop();
  });

}).call(this);
