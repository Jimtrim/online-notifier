// Generated by CoffeeScript 1.3.3
(function() {
  var $, bindBusFields, displayOnPageNotification, fadeInCanvas, ls, pageFlipCursorBlinking, resizeBackgroundImage, saveBus, testDesktopNotification;

  $ = jQuery;

  ls = localStorage;

  resizeBackgroundImage = function() {
    if (1550 < $(window).width()) {
      return $('#background').attr("style", "background:url('img/background-large.png') center center no-repeat;");
    } else if (1200 < $(window).height()) {
      return $('#background').attr("style", "background:url('img/background-large-vertical.png') center center no-repeat;");
    } else {
      return $('#background').attr("style", "background:url('img/background-medium.png') center center no-repeat;");
    }
  };

  displayOnPageNotification = function() {
    $("#notification").fadeIn(200);
    return setTimeout((function() {
      return $("#notification").fadeOut(200);
    }), 800);
  };

  pageFlipCursorBlinking = function() {
    return $(".pageflipcursor").animate({
      opacity: 0
    }, "fast", "swing", function() {
      return $(this).animate({
        opacity: 1
      }, "fast", "swing");
    });
  };

  testDesktopNotification = function() {
    var notification;
    notification = webkitNotifications.createHTMLNotification('notification.html');
    return notification.show();
  };

  bindBusFields = function(busField) {
    var cssSelector, direction, stop;
    cssSelector = '#' + busField;
    if (DEBUG) {
      console.log('Binding bus fields for ' + cssSelector);
    }
    stop = $(cssSelector + ' .stop');
    direction = $(cssSelector + ' .direction');
    $(stop).focus(function() {
      if (DEBUG) {
        console.log('.stop focus');
      }
      $(stop).val('');
      return $('#bus_suggestions').html('');
    });
    $(stop).focusout(function() {
      var contents, correctStop, suggestions;
      if (DEBUG) {
        console.log('.stop blur');
      }
      contents = $(stop).val();
      suggestions = Bus.getPotentialStops(contents);
      if (suggestions.length === 1) {
        correctStop = suggestions[0];
        $(stop).val(correctStop);
        return $('#bus_suggestions').html('');
      } else {
        $(stop).val('');
        return $('#bus_suggestions').html('');
      }
    });
    $(stop).keyup(function() {
      var correctStop, directions, i, nameStart, suggestion, suggestions;
      if (DEBUG) {
        console.log('.stop keyup');
      }
      nameStart = $(stop).val();
      if (nameStart.length > 0) {
        suggestions = Bus.getPotentialStops(nameStart);
        $('#bus_suggestions').html('');
        for (i in suggestions) {
          suggestion = $('<div class="suggestion">' + suggestions[i] + '</div>').hide();
          $('#bus_suggestions').append(suggestion);
          $(suggestion).fadeIn();
        }
        if (suggestions.length === 1) {
          correctStop = suggestions[0];
          $(stop).val(correctStop);
          $(stop).blur();
          $('#bus_suggestions').html('');
          suggestion = $('<div class="correct">' + correctStop + '</div>').hide();
          $('#bus_suggestions').append(suggestion);
          $(suggestion).fadeIn();
          setTimeout((function() {
            $('#bus_suggestions .correct').fadeOut(200);
            return setTimeout((function() {
              return $('#bus_suggestions').html('');
            }), 300);
          }), 1200);
          directions = Bus.getDirections(correctStop);
          $(direction).html('');
          for (i in directions) {
            $(direction).append('<option>' + directions[i] + '</option>');
          }
          return saveBus(busField);
        }
      }
    });
    return $(direction).change(function() {
      if (DEBUG) {
        console.log('.direction change');
      }
      return saveBus(busField);
    });
  };

  saveBus = function(busField) {
    var busStopId, cssSelector, direction, stop;
    cssSelector = '#' + busField;
    stop = $(cssSelector + ' .stop').val();
    direction = $(cssSelector + ' .direction').val();
    busStopId = Bus.getStop(stop, direction);
    ls[busField] = busStopId;
    displayOnPageNotification();
    if (DEBUG) {
      return console.log('http://api.visuweb.no/bybussen/1.0/Departure/Realtime/' + busStopId + '/f6975f3c1a3d838dc69724b9445b3466');
    }
  };

  fadeInCanvas = function() {
    webGLStart();
    return $('#LessonCanvas').animate({
      opacity: 1
    }, 1300, 'swing', function() {
      return setTimeout((function() {
        return $('#LessonCanvas').animate({
          opacity: 0
        }, 1300, 'swing');
      }), 200);
    });
  };

  $(function() {
    if (DEBUG) {
      less.watch();
    }
    $('input:checkbox').each(function(index, element) {
      return element.checked = ls[element.id] === "true";
    });
    $(window).bind("resize", resizeBackgroundImage);
    resizeBackgroundImage();
    if (OPERATING_SYSTEM === 'Windows') {
      $('#pagefliptext').attr("style", "bottom:9px;");
      $('#pagefliplink').attr("style", "bottom:9px;");
    }
    setInterval((function() {
      return pageFlipCursorBlinking();
    }), 600);
    setTimeout((function() {
      return $('#plusonebutton').fadeIn(150);
    }), 1100);
    $('#notification').click(function() {
      return fadeInCanvas();
    });
    bindBusFields('first_bus');
    bindBusFields('second_bus');
    return $('input:checkbox').click(function() {
      ls[this.id] = this.checked;
      if (this.id === 'showOffice' && this.checked === false) {
        chrome.browserAction.setIcon({
          path: 'img/icon-default.png'
        });
        chrome.browserAction.setTitle({
          title: EXTENSION_NAME
        });
      } else if (this.id === 'showOffice' && this.checked === true) {
        Office.get(function(status, title) {
          chrome.browserAction.setIcon({
            path: 'img/icon-' + status + '.png'
          });
          chrome.browserAction.setTitle({
            title: title
          });
          ls.currentStatus = status;
          return ls.currentStatusTitle = title;
        });
      }
      if (this.id === 'showNotifications' && this.checked === true) {
        testDesktopNotification();
      }
      if (this.id === 'useInfoscreen' && this.checked === true) {
        chrome.tabs.create({
          url: chrome.extension.getURL("infoscreen.html"),
          selected: false
        });
      }
      return displayOnPageNotification();
    });
  });

}).call(this);
